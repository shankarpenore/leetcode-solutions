class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
        List<List<Integer>> allPaths = new ArrayList();
        Queue<List<Integer>> q = new LinkedList();
        
        
        q.add(Arrays.asList(0));
        int target = graph.length-1;
        
        while(!q.isEmpty()){
    
            List<Integer> path = q.poll();
            if(path.get(path.size()-1) == target ){
                allPaths.add(new ArrayList<Integer>(path));
            }else{
                int lastNode = path.get(path.size()-1);
                for(int node : graph[lastNode]){
                    List<Integer> newpath = new ArrayList<Integer>(path);
                    newpath.add(node);
                    q.offer(newpath);
                }
            }        
        }
        return allPaths;
    }
    
}










// class Solution {
    
    
    
//     public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
//         List<List<Integer>> allPaths = new ArrayList();
//         List<Integer> path = new ArrayList();
        
//         path.add(0);
//         dfs(graph, allPaths, path, 0);
//         return allPaths;
//     }
    
//     public void dfs(int [][]graph, List<List<Integer>> allPaths, List<Integer> path, int cur){

//         if(cur >= graph.length) return;
        
//         if(cur == graph.length-1){
//             allPaths.add(new ArrayList(path));
//             return;
//         }
        
//         for(int node : graph[cur]){
//             path.add(node);
//             dfs(graph, allPaths, path, node);
//             path.remove(path.size()-1);
//         }
//     }
// }
