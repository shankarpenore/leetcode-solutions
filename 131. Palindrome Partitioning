class Solution {
    public List<List<String>> partition(String s) {
        
        boolean dp[][] = new boolean[s.length()][s.length()]
        List <List<String>> ans = new ArrayList();
        dfs(ans, 0 , new ArrayList<String>(), s);
        return ans;
    }
    
    public void dfs(List<List<String>> ans, int start, List<String> partition, String s){
        
        if(start >= s.length()){
            ans.add(new ArrayList<String>(partition));
            return;
        }
            
        for(int end = start; end < s.length(); end++){
            // if(isPalindrome(s,start,end)){
            //     partition.add(s.substring(start, end+1));
            //     dfs(ans, end+1, partition, s);
            //     partition.remove(partition.size()-1);
            // }
            if( s.charAt(start) == s.charAt(end) && (end-start >=2 ||)
        }
    }
    
    public boolean isPalindrome(String s, int i, int j){
        
        while(i < j){
            if(s.charAt(i) != s.charAt(j)) return false;
            i++;j--;
        }
        
        return true;
    }
}
