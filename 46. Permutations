class Solution {
    
    List<List<Integer>> res = new ArrayList();
    public List<List<Integer>> permute(int[] nums) {
        
        List<Integer> permutation = new ArrayList<Integer>();
        boolean []used = new boolean[nums.length];
        Arrays.fill(used,false);
        
        backtrack(permutation,0,nums,used);
        return res;
    }
    
    public void backtrack(List<Integer> permutation, int cur, int[]nums, boolean []used)
    {
        
        if(permutation.size() == nums.length){
            res.add(new ArrayList<Integer>(permutation));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(!used[i]){
                permutation.add(nums[i]);
                used[i] = true;
                backtrack(permutation,i+1,nums, used);
                permutation.remove(permutation.size()-1);
                used[i] = false;
            }

        }
            
    }
}
