class Solution {
    
    class MyNode{
        
        int time = 0;
        int i  = -1;
        int j = -1;
        
        public MyNode(int time, int i, int j){
            this.time = time;
            this.i = i;
            this.j = j;
        }
    }
    
    
    public void rotAdjacent(Queue <MyNode> q, int[][] grid, MyNode cur){
        
        if(cur.i+1 < grid.length && grid[cur.i+1][cur.j] == 1){
            grid[cur.i+1][cur.j] = 2;
            MyNode node = new MyNode(cur.time+1, cur.i+1, cur.j);
            q.offer(node);
        }
        
        if(cur.i-1 >= 0 && grid[cur.i-1][cur.j] == 1){
            grid[cur.i-1][cur.j] = 2;
            MyNode node = new MyNode(cur.time+1, cur.i-1, cur.j);
            q.offer(node);
        }
        
        if(cur.j+1 < grid[0].length && grid[cur.i][cur.j+1] == 1){
            grid[cur.i][cur.j+1] = 2;
            MyNode node = new MyNode(cur.time+1, cur.i, cur.j+1);
            q.offer(node);
        }
        
        if(cur.j-1 >= 0 && grid[cur.i][cur.j-1] == 1){
            grid[cur.i][cur.j-1] = 2;
            MyNode node = new MyNode(cur.time+1, cur.i, cur.j-1);
            q.offer(node);
        }
        
        
    }
    public int orangesRotting(int[][] grid) {
        
        int ans = 0;
        
        Queue <MyNode> q = new LinkedList();
         
        for(int i =0 ;i < grid.length; i++){
            for(int j = 0 ; j < grid[0].length; j++){
                if(grid[i][j] == 2){
                   MyNode node = new MyNode(0,i,j);
                    q.offer(node);
                }
            }
        }
        
        while(!q.isEmpty()){
            MyNode cur = q.poll();
            ans = Math.max(ans, cur.time);
            rotAdjacent(q, grid,cur);
        }
        
        for(int i =0 ;i < grid.length; i++){
            for(int j = 0 ; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    ans = -1;
                    break;
                }
            }
        }
        
        return ans;
    }
}
