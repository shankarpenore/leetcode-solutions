/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
//     public int rob(TreeNode root) {
        
//         int ans[] = helper(root);
//         return Math.max(ans[0], ans[1]);
        
//     }
    
//     public int[] helper(TreeNode root){
        
//         int grandlc =0;
//         int grandrc = 0;
        
//         int a[],b[],c[],d[];
//         int ans[] = new int[]{0,0};
        
//         if(root == null) return ans;

//         if(root.left != null) 
//         {
//             a = helper(root.left.left);
//             b = helper(root.left.right);
//             grandlc = a[1]+b[1];
//         }
            
            
//         if(root.right != null){
            
//             c = helper(root.right.left);
//             d = helper(root.right.right);
//             grandlc = c[1]+d[1];
//         }
            
        
//         int []left =  helper(root.left);
//         int []right = helper(root.right);
        
//         ans[0] = grandlc+grandrc+root.val;
//         ans[1] = Math.max(left[1],right[1]); 
//         return ans;
//     }
    
   HashMap <TreeNode, Integer> map = new HashMap();
    public int rob(TreeNode root) {
        
        // helper(root,0);
        int grandlc=0;
        int grandrc=0;
        if(root == null) return 0;
        if(map.containsKey(root)){
            return map.get(root);
        }
        if(root.left != null) 
            grandlc = rob(root.left.left) + rob(root.left.right);
        if(root.right != null)
            grandrc = rob(root.right.left) + rob(root.right.right);
        
        map.put(root,Math.max(grandlc+grandrc+root.val, rob(root.left)+rob(root.right)));
        
        return map.get(root);
    }
}
