
class Solution {
    
    public TreeNode recoverFromPreorder(String S) {
        
        int level = 0;
        int val  = 0;
        
        Stack <TreeNode> st = new Stack<>();
       for(int i = 0 ; i < S.length();){
           for(level = 0; S.charAt(i) == '-'; i++){
               level++;
           }
           
           for(val = 0; i < S.length() && S.charAt(i) != '-';i++){
               val = val * 10 + (S.charAt(i)-'0');
           }
           
           while(st.size() > level){
               st.pop();
           }
           
           TreeNode node = new TreeNode(val);
           
           if(!st.isEmpty()){
                if (st.peek().left == null) {
                    st.peek().left = node;
                } else {
                    st.peek().right = node;
                }
           }
           st.add(node);
       }
        
        while(st.size() > 1){
            st.pop();
        }
        return st.pop();

        
    }
}
