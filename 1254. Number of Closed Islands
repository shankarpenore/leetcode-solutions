class Solution {
    int rows;
    int cols;
    boolean visited[][];
    public int closedIsland(int[][] grid) {
        
        rows = grid.length;
        cols = grid[0].length;
        
        visited = new boolean[rows][cols];
//      first and last column
        for(int i = 0; i < rows; i++){
            dfs(grid,i,0);
            dfs(grid,i,cols-1);
        }
        
//      first and last row
        for(int j = 0; j < cols; j++){
            dfs(grid, 0, j);
            dfs(grid, rows-1, j);
        }
        int count = 0;
        for(int i = 1; i < rows; i++){
          for(int j = 1; j < cols; j++){
              if(grid[i][j] == 0){
                  dfs(grid, i, j);
                  count++;
              }
          }   
        }
    return count;
    }
    
    public void dfs(int grid[][], int r, int c){
        if(r < 0 || c < 0 || r >= rows || c >= cols || visited[r][c] || grid[r][c] == 1){
            return;
        }
        visited[r][c] = true;
        grid[r][c] = 1;
        
        dfs(grid, r+1 , c);
        dfs(grid, r-1 , c);
        dfs(grid, r , c+1);
        dfs(grid, r , c-1);
    }
}
