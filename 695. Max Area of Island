class Solution {
    int ans = 0;
    int rows = 0;
    int cols = 0;
    public int maxAreaOfIsland(int[][] grid) {
        this.rows = grid.length;
        this.cols = grid[0].length;
        boolean visited[][] = new boolean[rows][cols];
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                if(!visited[r][c] && grid[r][c] == 1){
                    ans = Math.max(ans, dfs(grid, visited, r, c));
                }
            }
        }
        return ans;
    }
    
    public int dfs(int grid[][], boolean visited[][], int i, int j){
        if(i < 0 || j < 0 || i >= rows || j >= cols){
            return 0;
        }
        if(visited[i][j] || grid[i][j] == 0) return 0;
        visited[i][j] = true;
        return (1+dfs(grid,visited,i+1,j)
                 +dfs(grid,visited,i-1,j)
                 +dfs(grid,visited,i,j+1)
                 +dfs(grid,visited,i,j-1));   
    }
}
