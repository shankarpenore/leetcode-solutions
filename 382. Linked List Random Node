/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    
    int count = 0;
    ListNode head = null;
    
    public Solution(ListNode head) {
        ListNode cur = head;
        this.head = head;
        
        while(cur != null){
            cur = cur.next;
            count++;
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        
        java.util.Random r = new java.util.Random();
        int pick = r.nextInt(count);
        
        ListNode cur = this.head;
        
        while(cur != null && pick != 0){
            cur = cur.next;
            pick--;
        }
        
        return cur.val;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
