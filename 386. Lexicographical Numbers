class Solution {
    
    public void dfs(int cur, int limit, List<Integer> res){
        
        if(cur > limit) 
            return;
        
        res.add(cur);
        
        for(int i= 0; i < 10; i++){
            if(cur * 10 + i > limit){
                return;
            }
            dfs(cur * 10 + i, limit, res);
        }
    }
    public List<Integer> lexicalOrder(int n) {
        
        List <Integer> res = new ArrayList();
        for(int i = 1; i <= 9 ; i++){
            dfs(i,n,res);
        }
        return res;
//         List <String>ans = new ArrayList<String>();
//         int a = 1;
//         while( a <= n){
//             Integer tmp = new Integer(a);
//             ans.add(tmp.toString());
//             a++;
//         }
        
//         Collections.sort(ans);
        
//         List <Integer> ans2 = new ArrayList();
//         for(String each : ans){
//             ans2.add(Integer.parseInt(each));
//         }
        
//         return ans2;
    }
    
}

